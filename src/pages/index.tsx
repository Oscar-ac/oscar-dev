import Head from 'next/head'
import Script from 'next/script'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import PortfolioItem from '@/components/portfolio/portfolioItem'
import Background from '@/components/background/background'

import OscarDevContextProvider from '@/store/OscarDevContextProvider';
import React, { useEffect, useState } from 'react'

const inter = Inter({ subsets: ['latin'] })

export default function Home( {portfolioItems}:any ){

  // console.log({portfolioItems});
  // var evenRow = true;


  const middleIndex = Math.ceil(portfolioItems.nodes.length / 2);

  const firstHalf = portfolioItems.nodes.slice().splice(0, middleIndex);   
  const secondHalf = portfolioItems.nodes.slice().splice(-middleIndex);
 
  const rowsArrays = [firstHalf, secondHalf];
  console.log(rowsArrays)

  return (
    <>
      <OscarDevContextProvider>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={`${styles.main}`}>
          {rowsArrays.map( (rowsArray: any, index:number) => {
            return(
              <div className={`${styles.gridRow} ${styles[`${(index % 2 === 0 ? '' : 'even-row')}`]}`}>
                {rowsArray.map( (item: any, index:number) => {
                  return(
                    <PortfolioItem  key={item.slug} pItem={item}/>
                  )
                })}
              </div>
            )
          })}
        </main>
      </OscarDevContextProvider>
    </>
  )
}

export async function getStaticProps(){
  const res = await fetch('http://oscar-dev.online/graphql', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      query: `
        query getPortfolioItems {
          portfolioItems(first: 100) {
            nodes {
              id
              slug
              title
              featuredImage {
                node {
                  altText
                  sourceUrl
                }
              }
            }
          }
        }
      `
    }),
  });

  const json = await res.json();

  return {
    props: {
      portfolioItems: json.data.portfolioItems
    }
  }
}